// <auto-generated />
using DesafioHyperativa.Repository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesafioHyperativa.Repository.Migrations
{
    [DbContext(typeof(HyperativaDbContext))]
    partial class HyperativaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("DesafioHyperativa.Domain.Entities.Card", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("DtRegister")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("DtUpdate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("LineIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("LotId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LotNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.HasIndex("LotId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("DesafioHyperativa.Domain.Entities.Lot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("DateOperation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DtRegister")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("DtUpdate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("LotNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberRecords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.HasIndex("UserId");

                    b.HasIndex("Name", "DateOperation", "LotNumber")
                        .IsUnique();

                    b.ToTable("Lot");
                });

            modelBuilder.Entity("DesafioHyperativa.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("DtRegister")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("DtUpdate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "bc63d576-0408-4270-b31e-b4c1541ea03d",
                            DtRegister = "jfTVy2K5abZuEsqsYFn3JLQLRuJeTPYH",
                            DtUpdate = "jfTVy2K5abZuEsqsYFn3JLQLRuJeTPYH",
                            Email = "KkXGkbDeAzkQ7EydVqVR1w==",
                            Password = "7evzsDzFFEc+yYUCM4RjiQ=="
                        },
                        new
                        {
                            Id = "ce07edbb-721d-4693-a0f2-cd01fe469acf",
                            DtRegister = "jfTVy2K5abZuEsqsYFn3JLQLRuJeTPYH",
                            DtUpdate = "jfTVy2K5abZuEsqsYFn3JLQLRuJeTPYH",
                            Email = "UNRb5m4m+nUQ7EydVqVR1w==",
                            Password = "O9yO1laZW/c+yYUCM4RjiQ=="
                        });
                });

            modelBuilder.Entity("DesafioHyperativa.Domain.Entities.Card", b =>
                {
                    b.HasOne("DesafioHyperativa.Domain.Entities.Lot", "Lot")
                        .WithMany("Cards")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DesafioHyperativa.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DesafioHyperativa.Domain.Entities.Lot", b =>
                {
                    b.HasOne("DesafioHyperativa.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DesafioHyperativa.Domain.Entities.Lot", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
